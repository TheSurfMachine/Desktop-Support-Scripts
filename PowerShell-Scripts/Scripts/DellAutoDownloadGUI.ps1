
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.134
     Generated on:       21/02/2017 23:00
     Generated by:       Maurice.Daly
	 File Name: 		 DellAutoDownloadGUI.ps1
	 Version:			 1.8
    --------------------------------------------------------------------------------
    .DESCRIPTION
        This script allows you to automate the process of keeping your Dell
		driver and BIOS update sources up to date. The script reads the Dell
		SCCM driver pack site for models you have specified and then downloads
		the corresponding latest driver packs and BIOS updates.
		
		The script generates a GUI allowing you to select features such as SCCM or
		MDT import jobs, Operating System, Driver or BIOS downloads etc.
		
		Use : This script is provided as it and I accept no responsibility for any issues arising from its use.
 
		Twitter : @modaly_it
		Blog : http://deployeverything.com
 
		Credits
		MDT Import Script Source - https://scriptimus.wordpress.com/2012/06/18/mdt-powershell-importing-drivers/
		SCCM Model Query Script - http://www.scconfigmgr.com/2015/04/14/get-device-models-in-configmgr-2012-with-powershell/ 

		ChangeLog
		
		Version 1.0 Initial Release
		Version 1.1 Changed style to tabs and added support for selecting unknown 
					models from the full Dell Optiplex, Latitude and Precision 
					Workstation model list.
					
					Added fix up logic for model AIO, 2-in-1 and other non-standard
					models when downloading SCCM driver packs.
		Version 1.2 Bug Fixes
		Version 1.3 Added Log File Creation
		Version 1.4 Proxy Server Settings Added
		Version 1.5 Added XPS Models As Requested
		Version 1.6 MDT Import Bug Fix
		Version 1.7 Proxy Server Settings Changed to use NTLM where possible.  
					Added download KB and percentage progress for driver pack downloads. 
		Version 1.8 Added Driver Import INF Updates for SCCM Import Process
		Version 1.9 Added Download Only Option
#>



#region Source: Startup.pss

#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$DeployEverythingcomLink = New-Object 'System.Windows.Forms.LinkLabel'
	$SCCMDellTabControl = New-Object 'System.Windows.Forms.TabControl'
	$SCCMTabPage1 = New-Object 'System.Windows.Forms.TabPage'
	$SiteCodeText = New-Object 'System.Windows.Forms.TextBox'
	$SiteServerInput = New-Object 'System.Windows.Forms.TextBox'
	$ConnectSCCMButton = New-Object 'System.Windows.Forms.Button'
	$SiteCodeLabel = New-Object 'System.Windows.Forms.Label'
	$SiteServerLabel = New-Object 'System.Windows.Forms.Label'
	$SCCMTabPage2 = New-Object 'System.Windows.Forms.TabPage'
	$FindDellModelsButton = New-Object 'System.Windows.Forms.Button'
	$labelAvailableModels = New-Object 'System.Windows.Forms.Label'
	$AddToListlButton = New-Object 'System.Windows.Forms.Button'
	$DellModelListComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$SCCMTabPage3 = New-Object 'System.Windows.Forms.TabPage'
	$MDTPathLabel = New-Object 'System.Windows.Forms.Label'
	$MDTBrowseButton = New-Object 'System.Windows.Forms.Button'
	$SCCMTabPage4 = New-Object 'System.Windows.Forms.TabPage'
	$UseProxyServerCheckbox = New-Object 'System.Windows.Forms.CheckBox'
	$ProxyPswdInput = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$ProxyUserInput = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$ProxyServerInput = New-Object 'System.Windows.Forms.TextBox'
	$labelProxyServer = New-Object 'System.Windows.Forms.Label'
	$labelPleaseNoteThisToolIs = New-Object 'System.Windows.Forms.Label'
	$ClearSelectionButton = New-Object 'System.Windows.Forms.Button'
	$ModelProgressOverlay = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$ProgressBar = New-Object 'System.Windows.Forms.ProgressBar'
	$ProgressListBox = New-Object 'System.Windows.Forms.ListBox'
	$AboutToolLabel = New-Object 'System.Windows.Forms.Label'
	$AutomationLabel = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$ProductListBox = New-Object 'System.Windows.Forms.ListBox'
	$StartDownloadButton = New-Object 'System.Windows.Forms.Button'
	$DownloadGroupBox = New-Object 'System.Windows.Forms.GroupBox'
	$ArchitectureComboxBox = New-Object 'System.Windows.Forms.ComboBox'
	$DownloadComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PlatformComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PackagePathTextBox = New-Object 'System.Windows.Forms.TextBox'
	$RepositoryTextBox = New-Object 'System.Windows.Forms.TextBox'
	$OSComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PackagePathLabel = New-Object 'System.Windows.Forms.Label'
	$RepositoryLabel = New-Object 'System.Windows.Forms.Label'
	$ArchitectureCheckBox = New-Object 'System.Windows.Forms.Label'
	$lSelectDeployLabel = New-Object 'System.Windows.Forms.Label'
	$OperatingSysLabel = New-Object 'System.Windows.Forms.Label'
	$labelDownloadType = New-Object 'System.Windows.Forms.Label'
	$ModelListBox = New-Object 'System.Windows.Forms.Label'
	$LoggingLabel = New-Object 'System.Windows.Forms.Label'
	$ModelProgressLabel = New-Object 'System.Windows.Forms.Label'
	$OpenMDTFileDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$MainForm_Load = {
		
		# Create Log File
		Get-Date -Format F | Out-File -FilePath $LogFile -Append
		Add-Content -Path $LogFile "Logging Running....."
		Add-Content -Path $LogFile " "
		
		# Set SCCM Site Server To Local Machine
		$SiteServerInput.Text = $env:COMPUTERNAME
		
	}
	
	$StartDownloadButton_Click = {
		
		# Set Variables Retrieved From GUI
		$ImportInto = [string]$PlatformComboBox.SelectedItem
		$DownloadType = [string]$DownloadComboBox.SelectedItem
		$DellProducts = $ProductListBox.SelectedItems
		$SiteCode = $SiteCodeText.Text
		
		# Set Initial Validation State
		$ValidationErrors = 0
		
		# ============ Validation Selection Details and Prerequisites ==============
		
		# Reset Job Process Log Dialog 
		if (($ProgressListBox.ForeColor) -eq "Red") { $ProgressListBox.Items.Clear() }
		
		# Validate Selected Models
		if (($ProductListBox.SelectedItems.Count) -lt "1")
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: No Models Selected")
			$ValidationErrors++
			UpdateLogWindow
		}
		
		# Validate Repository Path For BIOS & Driver Downloads
		if ((Test-Path -Path $RepositoryTextBox.Text) -eq $true)
		{
			$RepositoryPath = [string]$RepositoryTextBox.Text
			$ProgressListBox.Items.Add("Pre-Check: Respository Path Set To $RepositoryPath")
			UpdateLogWindow
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: UNC Repository Path Specified Could Not Be Found $($RepositoryTextBox.Text)")
			$ValidationErrors++
			UpdateLogWindow
		}
		
		
		
		if ($DownloadComboBox.Text -ne "BIOS")
		{
			# Validate Package Path For SCCM Driver Imports
			if (($ImportInto -eq "SCCM") -or ($ImportInto -eq "Both"))
			{
				if ((Test-Path -path $PackagePathTextBox.Text) -eq $true)
				{
					$PackagePath = [string]$PackagePathTextBox.Text
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("Error: UNC Package Path Specified Could Not Be Found $($PackagePathTextBox.Text)")
					$ValidationErrors++
					UpdateLogWindow
				}
			}
			
			# Validate OS Selection
			if (($OSComboBox).SelectedIndex -ne $null)
			{
				$WindowsVersion = ([string]($OSComboBox).SelectedItem).Trim("Windows ")
				UpdateLogWindow
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: Operating System Not Specified")
				$ValidationErrors++
				UpdateLogWindow
			}
			
			# Validate OS Architecture Selection
			if (($ArchitectureComboxBox).SelectedItem -ne $null)
			{
				$Architecture = "x" + ([string]$ArchitectureComboxBox.SelectedItem).Trim(" bit")
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: Operating System Architecture Not Specified")
				$ValidationErrors++
			}
			
		}
		
		# Set Proxy Variables
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyUser = [string]$ProxyUserInput.Text
			$ProxyPswd = ConvertTo-SecureString $([string]$ProxyPswdInput.Text) -AsPlainText -Force
			$ProxyServer = [string]$ProxyServerInput.Text
			$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
			$ProgressListBox.Items.Add("PROXY: Downloading through proxy $ProxyServer ")
			$ProgressListBox.Items.Add(" ")
			$ProxyValidated = $true
			UpdateLogWindow
		}
		
		# Download ScriptBlock
		$DriverDownloadJob = {
			Param ([string]$DriverRepositoryRoot,
				[string]$Model,
				[string]$SCCMDriverCab,
				[string]$DriverDownloadURL,
				$ProxyServer,
				$ProxyCred)
			
			# Start Driver Download	
			if ($ProxyCred -gt $null)
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $DriverDownloadURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab) -RetryTimeout 90 -RetryInterval 180 -Asynchronous -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault -Priority Foreground
			}
			else
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $DriverDownloadURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab) -RetryTimeout 90 -RetryInterval 180 -Asynchronous
			}
			
		}
		
		# MDT Import SriptBlock
		$MDTImportJob = {
			Param ([string]$PSDriveName,
				[string]$MDTDriverPath,
				[string]$Make,
				[string]$Model,
				[string]$DriverRevision,
				[string]$OperatingSystemDir,
				[string]$DriverExtractDest,
				[string]$DeploymentShare)
			
			Import-Module "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
			
			New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
			
			# =============== MDT Driver Import ====================
			
			Write-Host "Starting"
			Import-MDTDriver -path "$MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision" -SourcePath "$DriverExtractDest"
			Write-Host "Finished"
			
			
		}
		
		# Validate MDT PowerShell Commandlets / Install 
		if ((($ImportInto) -eq ("MDT" -or "Both")) -and ($ValidationErrors -eq 0))
		{
			# Validate MDT PS Commandlets
			if ((Test-Path -Path $MDTPSCommandlets) -eq $true)
			{
				# Import MDT Module
				$ProgressListBox.Items.Add("Importing: MDT PowerShell Commandlets")
				Import-Module $MDTPSCommandlets
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: MDT PowerShell Commandlets file not found at $MDTPSCommandlets")
				$ValidationErrors++
				UpdateLogWindow
			}
		}
		
		If ($ValidationErrors -eq 0)
		{
			# Test Package Path
			$ProgressListBox.Items.Clear()
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Starting Download Processes ======== ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Models selected: $($ProductListBox.SelectedItems)")
			$ProgressListBox.Items.Add("Operating System specified: Windows $($WindowsVersion)")
			$ProgressListBox.Items.Add("Operating System architecture specified: $($Architecture)")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Site Code specified: $($SiteCode)")
			$ProgressListBox.Items.Add("Respository Path specified: $($RepositoryPath)")
			$ProgressListBox.Items.Add("Package Path specified: $($PackagePath)")
			
			# Operating System Version
			$OperatingSystem = ("Windows " + $WindowsVersion)
			$TotalModelCount = $DellProducts.Count
			$RemainingModels = $TotalModelCount
			
			# Initialise Job Progress Bar
			$ProgressBar.Maximum = $TotalModelCount
			$ModelProgressOverlay.Maximum = $TotalModelCount
			
			
			if (($ImportInto -ne "SCCM") -or ($ImportInto -ne "Download Only"))
			{
				# Import MDT Module
				$ProgressListBox.Items.Add("IMPORT: Importing MDT PowerShell Module")
				Import-Module "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
				UpdateLogWindow
			}
			
			foreach ($Model in $DellProducts)
			{
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Starting Download,Extract And Import Processes For Dell Model: $($Model)")
				UpdateLogWindow
				
				# =================== DEFINE VARIABLES =====================
				
				# Directory used for driver and BIOS downloads
				$DriverRepositoryRoot = ($RepositoryPath.Trimend("\") + "\Dell\")
				
				# Vendor Make
				$Make = "Dell"
				
				# Directory used by SCCM for driver packages
				If ($ImportInto -ne "MDT") { $DriverPackageRoot = ($PackagePath.Trimend("\") + "\Dell\") }
				
				
				# =================== INITIATE DOWNLOADS ===================
				
				if ($ImportInto -eq "SCCM")
				{
					if ($DownloadType -ne "Drivers")
					{
						# ================= BIOS Upgrade Download ==================
						
						$ProgressListBox.Items.Add("SCCM: Retrieving BIOS Download URL For Dell Client Model: $($Model)")
						UpdateLogWindow
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { $_.outerText -eq $Model }
							if ($ModelLink -eq $null)
							{
								$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.outerText -eq $Model }
							}
						}
						else
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList).Links | Where-Object { $_.outerText -eq $Model }
						}
						$ModelURL = (Split-Path $DellDownloadList -Parent) + "/" + ($ModelLink.href)
						# Correct slash direction issues
						$ModelURL = $ModelURL.Replace("\", "/")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							if ($BIOSDownload -eq $null)
							{
								$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							}
						}
						else
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
						}
						$BIOSFile = $BIOSDownload.href | Split-Path -Leaf
						
						If ($BIOSDownload -ne $null)
						{
							$ProgressListBox.Items.Add("SCCM: BIOS Download URL Found: $($DellDownloadBase + $($BIOSDownload.href))")
							UpdateLogWindow
							# Check for destination directory, create if required and download the BIOS upgrade file
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS")) -eq $true)
							{
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile)) -eq $false)
								{
									$ProgressListBox.Items.Add("Downloading $($BIOSFile) BIOS update file")
									UpdateLogWindow
									if ($UseProxyServerCheckbox.Checked -eq $true)
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
									}
									else
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
									}
								}
								else
								{
									$ProgressListBox.Items.Add("SCCM: Skipping $BIOSFile... File already downloaded...")
									UpdateLogWindow
								}
							}
							else
							{
								$ProgressListBox.Items.Add("SCCM: Creating $Model download folder")
								New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\BIOS")
								$ProgressListBox.Items.Add("SCCM: Downloading $($BIOSFile) BIOS update file")
								if ($UseProxyServerCheckbox.Checked -eq $true)
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
								}
								else
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
								}
							}
							UpdateLogWindow
							
							# ================= Create BIOS Update Package ==================
							
							$BIOSUpdatePackage = ("Dell" + " " + $Model + " " + "BIOS UPDATE")
							$BIOSUpdateRoot = ($DriverRepositoryRoot + $Model + "\BIOS\")
							
							Set-Location -Path ($SiteCode + ":")
							if ((Get-CMPackage -name $BIOSUpdatePackage) -eq $null)
							{
								$ProgressListBox.Items.Add("SCCM: Creating BIOS Package")
								New-CMPackage -Name "$BIOSUpdatePackage" -Path $BIOSUpdateRoot -Description "Dell $Model BIOS Updates" -Manufacturer "Dell" -Language English
							}
							Set-Location -Path $env:SystemDrive
							$BIOSUpdateScript = ($BIOSUpdateRoot + "BIOSUpdate.ps1")
							$CurrentBIOSFile = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Sort-Object $_.LastWriteTime | select -First 1
							if ((Test-Path -Path $BIOSUpdateScript) -eq $False)
							{
								# Create BIOSUpdate.ps1 Deployment Script
								$ProgressListBox.Items.Add("SCCM: Creating BIOS Update PowerShell Script")
								New-Item -Path ($BIOSUpdateRoot + "BIOSUpdate.ps1") -ItemType File
								$BIOSSwitches = " -noreboot -nopause "
								Add-Content -Path $BIOSUpdateScript ('$CurrentBIOSFile=' + '"' + $($CurrentBIOSFile.name) + '"')
								Add-Content -Path $BIOSUpdateScript ('$BIOSSwitches=' + '"' + $($BIOSSwitches) + '"')
								Add-Content -Path $BIOSUpdateScript ('Start-Process $CurrentBIOSFile -ArgumentList $BIOSSwitches')
							}
							else
							{
								# Check if older BIOS update exists and update BIOSUpdate deployment script
								$BIOSFileCount = (Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse).count
								if ($BIOSFileCount -gt 1)
								{
									$OldBIOSFiles = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Where-Object { $_.Name -ne $CurrentBIOSFile.name }
									
									foreach ($OldBIOS in $OldBIOSFiles)
									{
										(Get-Content -Path $BIOSUpdateScript) -replace $OldBIOS.name, $CurrentBIOSFile.name | Set-Content -Path $BIOSUpdateScript
									}
								}
							}
							UpdateLogWindow
							
							# =============== Refresh Distribution Points =================
							Set-Location -Path ($SiteCode + ":")
							Get-CMPackage -name $BIOSUpdatePackage | Update-CMDistributionPoint
							Set-Location -Path $env:SystemDrive
						}
						else
						{
							$ProgressListBox.Items.Add("SCCM: BIOS Download Not Found")
						}
						
					}
					
					if ($DownloadType -ne "BIOS")
					{
						# Fix Up Model Lists For Dell Driver Pack Site
						$Model = $Model -replace "All In One", "AIO"
						$Model = $Model -replace "All-In-One", "AIO"
						$Model = $Model -replace "Rugged", " "
						$Model = $Model -replace "Rugged Extreme", " "
						$Model = ($Model).trim("2-in-1")
						$Model = ($Model).TrimEnd("XFR")
						$Model = ($Model).trimEnd("ATG")
						$Model = ($Model).trimEnd("e ST2E")
						$Model = ($Model).trim()
						
						If ($Model -like "XPS*")
						{
							# Get XPS Model Code
							$XPSModel = $Model.Split(" ")[2]
							$Model = $Model.TrimEnd($XPSModel)
							$Model = $Model + "*" + $XPSModel + "*"
						}
						
						
						# =============== SCCM Driver Cab Download =================
						
						$ProgressListBox.Items.Add(" ")
						$ProgressListBox.Items.Add("SCCM: Retrieving SCCM Driver Pack Site For Model: $Model")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
							if ($ModelLink -eq $Null)
							{
								$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
							}
						}
						else
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
						}
						$ModelURL = $DellBaseURL + ($ModelLink.href)
						$ProgressListBox.Items.Add("SCCM: URL Found: $ModelURL")
						UpdateLogWindow
						
						If ($ModelURL -ne $DellBaseURL)
						{
							$ModelURL = $ModelURL.Replace("\", "/")
							if ($UseProxyServerCheckbox.Checked -eq $true)
							{
								$SCCMDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.href -like "*.cab" } | select -First 1
							}
							else
							{
								$SCCMDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { $_.href -like "*.cab" } | select -First 1
							}
							$SCCMDriverCab = $SCCMDriverDownload.href | Split-Path -Leaf
							$DriverSourceCab = ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)
							$DriverPackageDir = ($DriverSourceCab | Split-Path -Leaf)
							$DriverPackageDir = $DriverPackageDir.Substring(0, $DriverPackageDir.length - 4)
							$DriverCabDest = $DriverPackageRoot + $DriverPackageDir
							$DriverRevision = ($DriverPackageDir).Split("-")[2]
							$DriverCategoryName = $Make + "," + $Model + "," + $OperatingSystem + "," + $DriverRevision
							$DriverExtractDest = ($DriverRepositoryRoot + $Model + "\" + $DriverRevision)
							
							# Check for destination directory, create if required and download the driver cab
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)) -eq $false)
							{
								$ProgressListBox.Items.Add("SCCM: Creating $Model download folder")
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")) -eq $false)
								{
									New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
								}
								$ProgressListBox.Items.Add("SCCM: Downloading $($SCCMDriverCab) driver cab file")
								$ProgressListBox.Items.Add("SCCM: Downloading from URL: $($SCCMDriverDownload.href)")
								UpdateLogWindow
								
								Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $SCCMDriverCab, $($SCCMDriverDownload).href, $ProxyServer, $ProxyCred)
								sleep -Seconds 5
								$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
								while (($BitsJob).JobState -eq "Connecting")
								{
									$ProgressListBox.Items.Add("SCCM: Establishing Connection to $(($SCCMDriverDownload).href)...")
									sleep -seconds 30
									UpdateLogWindow
								}
								while (($BitsJob).JobState -eq "Transferring")
								{
									$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
									$ProgressListBox.Items.Add("SCCM: Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
									sleep -seconds 30
									UpdateLogWindow
								}
								Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
								$ProgressListBox.Items.Add("SCCM: Driver Revision: $DriverRevision")
							}
							else
							{
								$ProgressListBox.Items.Add("SCCM: Skipping $SCCMDriverCab... Driver pack already downloaded...")
							}
							if ((Test-Path -Path $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)) -eq $true)
							{
								
								# =============== Create Driver Package + Import Drivers =================
								
								#$ProgressListBox.Items.Add("DEBUG Driver Package Location: $DriverCabDest")
								if ((Test-Path -Path $DriverCabDest) -eq $false)
								{
									New-Item -Type dir -Path $DriverExtractDest
									New-Item -Type dir -Path $DriverCabDest
									Set-Location -Path ($SiteCode + ":")
									
									# Fix For XPS Models
									$Model = $Model.Split("*")[0] + $Model.Split("*")[1]
									
									$CMDDriverPackage = ("Dell " + $Model + " - " + $OperatingSystem + " " + $Architecture)
									$ProgressListBox.Items.Add("SCCM: Creating Driver Package")
									UpdateLogWindow
									Set-Location -Path $env:SystemDrive
									$ProgressListBox.Items.Add("SCCM: Expanding Driver CAB Sourece File: $DriverSourceCab")
									$ProgressListBox.Items.Add("SCCM: Expanding Driver CAB Destination Directory: $DriverExtractDest")
									UpdateLogWindow
									Expand "$DriverSourceCab" -F:* "$DriverExtractDest"
									$DriverINFFiles = Get-ChildItem -Path $DriverExtractDest -Recurse -Filter "*.inf" | Where-Object { $_.FullName -like "*$Architecture*" }
									Set-Location -Path ($SiteCode + ":")
									if (Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName)
									{
										$ProgressListBox.Items.Add("SCCM: Category already exists")
										$DriverCategory = Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
									}
									else
									{
										$ProgressListBox.Items.Add("SCCM: Creating Category $DriverCategoryName")
										$DriverCategory = New-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
									}
									$ProgressListBox.Items.Add("SCCM: Creating Driver Package for Dell $Model")
									UpdateLogWindow
									New-CMDriverPackage -Name $CMDDriverPackage -path ($DriverPackageRoot + $DriverPackageDir + "\" + $Architecture)
									Set-CMDriverPackage -Name $CMDDriverPackage -Version $DriverRevision
									$DriverPackage = Get-CMDriverPackage -Name $CMDDriverPackage
									
									# Import Driver Loop
									$DriverNo = 1
									foreach ($DriverINF in $DriverINFFiles)
									{
										$DriverInfo = Import-CMDriver -UncFileLocation ($DriverINF.FullName) -ImportDuplicateDriverOption AppendCategory -EnableAndAllowInstall $True -AdministrativeCategory $DriverCategory | Select-Object *
										Add-CMDriverToDriverPackage -DriverID $DriverInfo.CI_ID -DriverPackageName "$($CMDDriverPackage)" -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
										$ProgressListBox.Items.Add("SCCM: Importing Driver INF $DriverNo Of $($DriverINFFiles.count): $($DriverINF.FullName | Split-Path -Leaf)")
										$DriverNo++
										UpdateLogWindow
									}
								}
								else
								{
									$ProgressListBox.Items.Add("SCCM: Driver Package Already Exists.. Skipping")
								}
								Set-Location -Path $env:SystemDrive
							}
							else
							{
								$ProgressListBox.Items.Add("SCCM: Error Downloading $SCCMDriverCab")
							}
						}
						else
						{
							$ProgressListBox.Items.Add("SCCM: Operating system driver package download path not found.. Skipping $Model")
						}
					}
				}
				
				if (($ImportInto -eq "Both") -or ($ImportInto -eq "MDT"))
				{
					# Fix Up Model Lists For Dell Driver Pack Site
					$Model = $Model -replace "All In One", "AIO"
					$Model = $Model -replace "All-In-One", "AIO"
					$Model = $Model -replace "Rugged", " "
					$Model = $Model -replace "Rugged Extreme", " "
					$Model = ($Model).trim("2-in-1")
					$Model = ($Model).trim("XFR")
					$Model = ($Model).trim("ATG")
					$Model = ($Model).trim("e ST2E")
					$Model = ($Model).trim()
					
					# =================== MDT Driver Download =====================
					
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("==================== MDT Driver Download ====================")
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("Starting MDT Driver Download Process")
					UpdateLogWindow
					
					# =================== DEFINE VARIABLES =====================
					
					# Directory used for driver downloads
					$DriverRepositoryRoot = ($RepositoryPath.Trimend("\") + "\Dell\")
					$ProgressListBox.Items.Add("MDT: Driver Package Base Location Set To $DriverRepositoryRoot")
					
					# Operating System Version
					$OperatingSystem = ("Windows " + $WindowsVersion)
					UpdateLogWindow
					
					# =============== MDT Driver Cab Download =================
					
					$ProgressListBox.Items.Add(" ")
					if ($UseProxyServerCheckbox.Checked -eq $true)
					{
						$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
					}
					else
					{
						$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
					}
					$ModelURL = $DellBaseURL + ($ModelLink.href)
					UpdateLogWindow
					
					If ($ModelURL -ne $DellBaseURL)
					{
						
						# Correct slash direction issues
						$ModelURL = $ModelURL.Replace("\", "/")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$MDTDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.href -like "*.cab" }
						}
						else
						{
							$MDTDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { $_.href -like "*.cab" }
						}
						$MDTDriverCab = $MDTDriverDownload.href | Split-Path -Leaf
						
						# Check for destination directory, create if required and download the driver cab
						if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $MDTDriverCab)) -eq $false)
						{
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\")) -eq $false)
							{
								$ProgressListBox.Items.Add("MDT: Creating $Model Download Folder")
								New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
							}
							else
							{
								# Remove previous driver cab revisions
								Get-ChildItem -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\") | Remove-Item
							}
							$ProgressListBox.Items.Add("Downloading $($MDTDriverCab) Driver Cab File")
							
							Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $SCCMDriverCab, $($MDTDriverDownload).href, $ProxyServer, $ProxyCred)
							sleep -Seconds 5
							$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
							while (($BitsJob).JobState -eq "Connecting")
							{
								$ProgressListBox.Items.Add("MDT: Establishing Connection to $(($MDTDriverDownload).href) ...")
								sleep -seconds 30
								UpdateLogWindow
							}
							while (($BitsJob).JobState -eq "Transferring")
							{
								$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
								$ProgressListBox.Items.Add("MDT: Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
								sleep -seconds 30
								UpdateLogWindow
							}
							Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
							$ProgressListBox.Items.Add("MDT: Driver Revision: $DriverRevision")
						}
						else
						{
							$ProgressListBox.Items.Add("MDT: Skipping $MDTDriverCab... Driver pack already downloaded...")
						}
						
						if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $MDTDriverCab)) -eq $true)
						{
							# =============== MDT Driver Import ====================
							
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("==================== MDT Driver Import ====================")
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("MDT: Starting MDT Driver Import Process")
							UpdateLogWindow
							
							# Detect First MDT PSDrive
							$ProgressListBox.Items.Add("MDT: Detecting MDT PSDrive")
							If (!$PSDriveName) { $PSDriveName = (Get-MDTPersistentDrive)[0].name }
							
							# Detect First MDT Deployment Share
							$ProgressListBox.Items.Add("MDT: Detecting MDT Deployment Share")
							If (!$DeploymentShare) { $DeploymentShare = (Get-MDTPersistentDrive)[0].path }
							
							$MDTDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							#$ProgressListBox.Items.Add("DEBUG: MDTDriverPath = $MDTDriverPath")
							$MDTSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							#$ProgressListBox.Items.Add("DEBUG: MDTSelectionProfilePath = $MDTSelectionProfilePath")
							
							# Connect to Deployment Share
							$ProgressListBox.Items.Add("MDT: Connecting to MDT Share")
							If (!(Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue))
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							$DSDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							$DSSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							
							# Connect to Deployment Share
							If ((Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue) -eq $false)
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							# =============== MDT Driver Import ====================
							
							$OperatingSystemDir = ($OperatingSystem + " " + $Architecture)
							$DriverSource = $DriverRepositoryRoot + $Model + '\Driver Cab\' + $MDTDriverCab
							$DriverRevision = $($($MDTDriverCab).Split("-")[2])
							
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTDriverPath -enable "True" -Name $OperatingSystemDir -ItemType "folder"
							}
							
							if ((Test-Path $MDTSelectionProfilePath"\Drivers - "$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTSelectionProfilePath -enable "True" -Name "Drivers - $OperatingSystemDir" -Definition "<SelectionProfile><Include path=`"Out-of-Box Drivers\$OS`" /></SelectionProfile>" -ReadOnly "False" -Verbose
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir -enable "True" -Name $Make -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make -enable "True" -Name $Model -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make\$Model -enable "True" -Name $DriverRevision -ItemType "folder"
								$ProgressListBox.Items.Add("MDT: Importing MDT driver pack for $Make $Model - Revision $DriverRevision")
								$ProgressListBox.Items.Add("MDT: MDT Driver Path = $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision")
								#Import-MDTDriver -path "$MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision" -SourcePath "$($DriverSource | Split-Path -Parent)"
								Start-Job -Name "$Model-MDTImport" -ScriptBlock $MDTImportJob -ArgumentList ($PSDriveName, $MDTDriverPath, $Make, $Model, $DriverRevision, $OperatingSystemDir, $DriverExtractDest, $DeploymentShare)
								while ((Get-Job -Name "$Model-MDTImport").State -eq "Running")
								{
									$ProgressListBox.Items.Add("MDT: Waiting For Import Process To Finish For $Make $Model $OperatingSystem $Architecture.. Next Check In 30 Seconds")
									UpdateLogWindow
									sleep -seconds 30
								}
								Get-Job -Name "$Model-MDTImport" | Remove-Job
							}
							else
							{
								$ProgressListBox.Items.Add("MDT: Driver pack already exists.. Skipping..")
							}
						}
						else
						{
							$ProgressListBox.Items.Add("SCCM: Error Downloading $MDTDriverCab")
						}
					}
				}
				
				if ($ImportInto -eq "Download Only")
				{
					if ($DownloadType -ne "Drivers")
					{
						# ================= BIOS Upgrade Download ==================
						
						$ProgressListBox.Items.Add("Download Only: Retrieving BIOS Download URL For Dell Client Model: $($Model)")
						UpdateLogWindow
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { $_.outerText -eq $Model }
							if ($ModelLink -eq $null)
							{
								$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.outerText -eq $Model }
							}
						}
						else
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDownloadList).Links | Where-Object { $_.outerText -eq $Model }
						}
						$ModelURL = (Split-Path $DellDownloadList -Parent) + "/" + ($ModelLink.href)
						# Correct slash direction issues
						$ModelURL = $ModelURL.Replace("\", "/")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							if ($BIOSDownload -eq $null)
							{
								$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
							}
						}
						else
						{
							$BIOSDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*BIOS*") -and ($_.outerHTML -like "*WINDOWS*") } | select -First 1
						}
						$BIOSFile = $BIOSDownload.href | Split-Path -Leaf
						
						If ($BIOSDownload -ne $null)
						{
							$ProgressListBox.Items.Add("Download Only: BIOS Download URL Found: $($DellDownloadBase + $($BIOSDownload.href))")
							UpdateLogWindow
							# Check for destination directory, create if required and download the BIOS upgrade file
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS")) -eq $true)
							{
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile)) -eq $false)
								{
									$ProgressListBox.Items.Add("Downloading $($BIOSFile) BIOS update file")
									UpdateLogWindow
									if ($UseProxyServerCheckbox.Checked -eq $true)
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
									}
									else
									{
										Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
									}
								}
								else
								{
									$ProgressListBox.Items.Add("Download Only: Skipping $BIOSFile... File already downloaded...")
									UpdateLogWindow
								}
							}
							else
							{
								$ProgressListBox.Items.Add("Download Only: Creating $Model download folder")
								New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\BIOS")
								$ProgressListBox.Items.Add("Download Only: Downloading $($BIOSFile) BIOS update file")
								if ($UseProxyServerCheckbox.Checked -eq $true)
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180 -ProxyList $ProxyServer -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault
								}
								else
								{
									Start-BitsTransfer ($DellDownloadBase + $BIOSDownload.href) -Destination ($DriverRepositoryRoot + $Model + "\BIOS\" + $BIOSFile) -RetryTimeout 90 -RetryInterval 180
								}
							}
							UpdateLogWindow
							
							# ================= Create BIOS Update Package ==================
							
							$BIOSUpdatePackage = ("Dell" + " " + $Model + " " + "BIOS UPDATE")
							$BIOSUpdateRoot = ($DriverRepositoryRoot + $Model + "\BIOS\")
							
							$BIOSUpdateScript = ($BIOSUpdateRoot + "BIOSUpdate.ps1")
							$CurrentBIOSFile = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Sort-Object $_.LastWriteTime | select -First 1
							if ((Test-Path -Path $BIOSUpdateScript) -eq $False)
							{
								# Create BIOSUpdate.ps1 Deployment Script
								$ProgressListBox.Items.Add("Download Only: Creating BIOS Update PowerShell Script")
								New-Item -Path ($BIOSUpdateRoot + "BIOSUpdate.ps1") -ItemType File
								$BIOSSwitches = " -noreboot -nopause "
								Add-Content -Path $BIOSUpdateScript ('$CurrentBIOSFile=' + '"' + $($CurrentBIOSFile.name) + '"')
								Add-Content -Path $BIOSUpdateScript ('$BIOSSwitches=' + '"' + $($BIOSSwitches) + '"')
								Add-Content -Path $BIOSUpdateScript ('Start-Process $CurrentBIOSFile -ArgumentList $BIOSSwitches')
							}
							else
							{
								# Check if older BIOS update exists and update BIOSUpdate deployment script
								$BIOSFileCount = (Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse).count
								if ($BIOSFileCount -gt 1)
								{
									$OldBIOSFiles = Get-ChildItem -Path $BIOSUpdateRoot -Filter *.exe -Recurse | Where-Object { $_.Name -ne $CurrentBIOSFile.name }
									
									foreach ($OldBIOS in $OldBIOSFiles)
									{
										(Get-Content -Path $BIOSUpdateScript) -replace $OldBIOS.name, $CurrentBIOSFile.name | Set-Content -Path $BIOSUpdateScript
									}
								}
							}
							UpdateLogWindow
							
						}
						else
						{
							$ProgressListBox.Items.Add("Download Only: BIOS Download Not Found")
						}
						
					}
					
					if ($DownloadType -ne "BIOS")
					{
						# Fix Up Model Lists For Dell Driver Pack Site
						$Model = $Model -replace "All In One", "AIO"
						$Model = $Model -replace "All-In-One", "AIO"
						$Model = $Model -replace "Rugged", " "
						$Model = $Model -replace "Rugged Extreme", " "
						$Model = ($Model).trim("2-in-1")
						$Model = ($Model).TrimEnd("XFR")
						$Model = ($Model).trimEnd("ATG")
						$Model = ($Model).trimEnd("e ST2E")
						$Model = ($Model).trim()
						
						If ($Model -like "XPS*")
						{
							# Get XPS Model Code
							$XPSModel = $Model.Split(" ")[2]
							$Model = $Model.TrimEnd($XPSModel)
							$Model = $Model + "*" + $XPSModel + "*"
						}
						
						
						# =============== SCCM Driver Cab Download =================
						
						$ProgressListBox.Items.Add(" ")
						$ProgressListBox.Items.Add("Download Only: Retrieving SCCM Driver Pack Site For Model: $Model")
						if ($UseProxyServerCheckbox.Checked -eq $true)
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing -Proxy $ProxyServer -ProxyUseDefaultCredentials).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
							if ($ModelLink -eq $Null)
							{
								$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
							}
						}
						else
						{
							$ModelLink = (Invoke-WebRequest -Uri $DellDriverListURL -UseBasicParsing).Links | Where-Object { ($_.outerHTML -like "*$Model W*") -and ($_.outerHTML -like "*$OperatingSystem*") } | select -First 1
						}
						$ModelURL = $DellBaseURL + ($ModelLink.href)
						$ProgressListBox.Items.Add("Download Only: URL Found: $ModelURL")
						UpdateLogWindow
						
						If ($ModelURL -ne $DellBaseURL)
						{
							$ModelURL = $ModelURL.Replace("\", "/")
							if ($UseProxyServerCheckbox.Checked -eq $true)
							{
								$SCCMDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing -Proxy $ProxyServer -ProxyCredential $ProxyCred).Links | Where-Object { $_.href -like "*.cab" } | select -First 1
							}
							else
							{
								$SCCMDriverDownload = (Invoke-WebRequest -Uri $ModelURL -UseBasicParsing).Links | Where-Object { $_.href -like "*.cab" } | select -First 1
							}
							$SCCMDriverCab = $SCCMDriverDownload.href | Split-Path -Leaf
							$DriverSourceCab = ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)
							$DriverPackageDir = ($DriverSourceCab | Split-Path -Leaf)
							$DriverPackageDir = $DriverPackageDir.Substring(0, $DriverPackageDir.length - 4)
							$DriverCabDest = $DriverPackageRoot + $DriverPackageDir
							$DriverRevision = ($DriverPackageDir).Split("-")[2]
							$DriverCategoryName = $Make + "," + $Model + "," + $OperatingSystem + "," + $DriverRevision
							$DriverExtractDest = ($DriverRepositoryRoot + $Model + "\" + $DriverRevision)
							
							# Check for destination directory, create if required and download the driver cab
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)) -eq $false)
							{
								$ProgressListBox.Items.Add("Download Only: Creating $Model download folder")
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")) -eq $false)
								{
									New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
								}
								$ProgressListBox.Items.Add("Download Only: Downloading $($SCCMDriverCab) driver cab file")
								$ProgressListBox.Items.Add("Download Only: Downloading from URL: $($SCCMDriverDownload.href)")
								UpdateLogWindow
								
								Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $SCCMDriverCab, $($SCCMDriverDownload).href, $ProxyServer, $ProxyCred)
								sleep -Seconds 5
								$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
								while (($BitsJob).JobState -eq "Connecting")
								{
									$ProgressListBox.Items.Add("Download Only: Establishing Connection to $(($SCCMDriverDownload).href)...")
									sleep -seconds 30
									UpdateLogWindow
								}
								while (($BitsJob).JobState -eq "Transferring")
								{
									$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
									$ProgressListBox.Items.Add("Download Only: Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 30 seconds..")
									sleep -seconds 30
									UpdateLogWindow
								}
								Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
								$ProgressListBox.Items.Add("Download Only: Driver Revision: $DriverRevision")
							}
							else
							{
								$ProgressListBox.Items.Add("Download Only: Skipping $SCCMDriverCab... Driver pack already downloaded...")
							}
							if ((Test-Path -Path $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $SCCMDriverCab)) -eq $true)
							{
								
								# =============== Extract Drivers =================
								
								if ((Test-Path -Path $DriverCabDest) -eq $false)
								{
									New-Item -Type dir -Path $DriverExtractDest
									New-Item -Type dir -Path $DriverCabDest
									
									# Fix For XPS Models
									$Model = $Model.Split("*")[0] + $Model.Split("*")[1]
									$ProgressListBox.Items.Add("Download Only: Creating Driver Package")
									UpdateLogWindow
									Set-Location -Path $env:SystemDrive
									$ProgressListBox.Items.Add("Download Only: Expanding Driver CAB Sourece File: $DriverSourceCab")
									$ProgressListBox.Items.Add("Download Only: Expanding Driver CAB Destination Directory: $DriverExtractDest")
									UpdateLogWindow
									Expand "$DriverSourceCab" -F:* "$DriverExtractDest"
									
								}
								else
								{
									$ProgressListBox.Items.Add("Download Only: Driver Package Already Exists.. Skipping")
								}
								Set-Location -Path $env:SystemDrive
							}
							else
							{
								$ProgressListBox.Items.Add("Download Only: Error Downloading $SCCMDriverCab")
							}
						}
						else
						{
							$ProgressListBox.Items.Add("Download Only: Operating system driver package download not found.. Skipping $Model")
						}
					}
				}
				
				$ProgressBar.Increment(1)
				$ModelProgressOverlay.Increment(1)
				$RemainingModels--
				UpdateLogWindow
			}
			$ProgressBar.Increment(1)
			$ModelProgressOverlay.Increment(1)
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("======== Finished Processing ======== ")
			$ProgressListBox.Items.Add(" ")
			UpdateLogWindow
		}
		
		#Output to Log
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	$ConnectSCCMButton_Click = {
		
		$SiteServer = [string]$SiteServerInput.Text
		$ProgressListBox.ForeColor = "Black"
		$ProgressListBox.Items.Clear()
		$ProgressListBox.Items.Add("======== Validating SCCM Server Details ======== ")
		$ProgressListBox.Items.Add(" ")
		If ((Test-WSMan -ComputerName $SiteServer).wsmid -ne $null)
		{
			Clear-Host
			$ProgressListBox.Items.Add("Connected To Site Server: $SiteServer ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Checking SCCM Prerequisites ======== ")
			$ProgressListBox.Items.Add(" ")
			
			# Import SCCM PowerShell Module
			$ModuleName = (get-item $env:SMS_ADMIN_UI_PATH).parent.FullName + "\ConfigurationManager.psd1"
			If ($ModuleName -ne $null)
			{
				$ProgressListBox.Items.Add("Loading SCCM PowerShell Module")
				Import-Module $ModuleName
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("======== Connecting to SCCM Server ======== ")
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Querying Site Code From $SiteServer")
				QuerySiteCode -SiteServer $SiteServer
				$SiteCode = $SiteCodeText.Text
				
				if ($SiteCode -ne $null)
				{
					# Enumerate through all models
					$Models = Get-WmiObject -ComputerName $SiteServer -Namespace "root\SMS\site_$($SiteCode)" -Class SMS_G_System_COMPUTER_SYSTEM | Select-Object -Property Model | Where-Object { ($_.Model -like "*Optiplex*") -or ($_.Model -like "*Latitude*") -or ($_.Model -like "*Precision*") -or ($_.innerText -like "XPS*") }
					$ProgressListBox.Items.Add(" ")
					# Add model to ArrayList if not present
					if ($Models -ne $null)
					{
						foreach ($Model in $Models)
						{
							if ($Model.Model -notin $DellProducts)
							{
								$DellProducts.Add($Model.Model) | Out-Null
								$ProductListBox.Items.Add($Model.Model)
							}
						}
						$ProgressListBox.Items.Add("Models Found: $(($DellProducts).count)")
						$ProgressListBox.Items.Add(" ")
						$StartDownloadButton.Enabled = $true
					}
					else
					{
						$ProgressListBox.ForeColor = "Red"
						$ProgressListBox.Items.Add("Error: No Dell Client Models Found. Please check the Site Server name and ensure you have sufficient rights.")
					}
				}
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: SCCM PowerShell Module Not Found")
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: SCCM Server Specified Not Found - $($SiteServerInput.Text)")
		}
		
		#Output to Log
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	$MDTBrowseButton_Click = {
		
		$ProductListBox.Items.Clear()
		$OpenMDTFileDialog.Filter = "All CSV Files (*.CSV) | *.CSV"
		$OpenMDTFileDialog.ShowDialog()
		$MDTPathLabel.Text = $OpenMDTFileDialog.FileName
		If ($MDTPathLabel.Text -gt $null)
		{
			$ConnectSCCMButton.Enabled = $true
			$PlatformComboBox.Text = "MDT"
			$PlatformComboBox.Enabled = $false
			$DownloadComboBox.Text = "Drivers"
			$DownloadComboBox.Enabled = $false
			$PackagePathTextBox.Enabled = $false
			$SiteServerInput.Enabled = $false
			$StartDownloadButton.Enabled = $true
			# Determine SCCM or MDT Manual Import then find available models
			if ($MDTPathLabel.Text -like "*.csv")
			{
				$ProgressListBox.Items.Add("Importing Model List: $($OpenMDTFileDialog.FileName) ")
				$Models = Import-Csv -Path $OpenMDTFileDialog.FileName
				$ProgressListBox.Items.Add("Models Found: $($Models.Model)")
				$ProgressListBox.Items.Add(" ")
				# Add model to ArrayList if not present
				if ($Models -ne $null)
				{
					foreach ($Model in $Models.Model)
					{
						if ($Model -notin $DellProducts)
						{
							$DellProducts.Add($Model) | Out-Null
							$ProductListBox.Items.Add($Model)
						}
					}
					$StartDownloadButton.Enabled = $true
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("Error: CSV File Not Formatted Correctly Or No Models Listed")
					$ProgressListBox.Items.Add("Error: Please check the contents of your CSV file. It should contain a single column with Model as the header.")
				}
			}
		}
	}
	
	
	$ClearSelectionButton_Click = {
		#Reset's Windows Form
		$ProgressListBox.ForeColor = "Black"
		$ProductListBox.Items.Clear()
		$ProgressListBox.Items.Clear()
		$SiteServerInput.Text = $null
		$SiteServerInput.Enabled = $true
		$SiteCodeText = $null
		$PlatformComboBox.SelectedItem = $null
		$PlatformComboBox.Enabled = $true
		$DownloadComboBox.SelectedItem = $null
		$DownloadComboBox.Enabled = $true
		$OSComboBox.SelectedItem = $null
		$OSComboBox.Enabled = $true
		$ArchitectureComboxBox.SelectedItem = $null
		$ArchitectureComboxBox.Enabled = $true
		$RepositoryTextBox.Text = $null
		$PackagePathTextBox.Text = $null
		$PackagePathTextBox.Enabled = $true
		$StartDownloadButton.Enabled = $false
		$MDTPathLabel.Text = $null
		
	}
	
	$AddToListlButton_Click = {
		$ProductListBox.Items.Add($DellModelListComboBox.Text)
	}
	
	$FindDellModelsButton_Click = {
		
		# Check for Proxy use and set variables
		if ($ProxyValidated -eq $false)
		{
			if ($UseProxyServerCheckbox.Checked -eq $true)
			{
				$ProxyUser = [string]$ProxyUserInput.Text
				$ProxyPswd = ConvertTo-SecureString $ProxyPswdInput.Text -AsPlainText -Force
				$ProxyServer = [string]$ProxyServerInput.Text
				$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("======== Validating Proxy Server Settings ======== ")
				$ProgressListBox.Items.Add(" ")
				$ProxyCheck = Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyCredential $ProxyCred
				if ($ProxyCheck.StatusDescription -eq "OK")
				{
					$ProgressListBox.Items.Add("PROXY: Connection to Dell SCCM site validated via proxy $ProxyServer ")
					$ProgressListBox.Items.Add(" ")
					$ProxyValidated = $true
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("PROXY: Error. Please Check Proxy Server Details Are Valid ")
				}
			}
		}
		
		# Gets a list of Dell Optiplex, Latitude and Precision Workstation Models to select manually
		$ProgressListBox.Items.Add(" ")
		$ProgressListBox.Items.Add("======== Downloading Dell Model List ======== ")
		$ProgressListBox.Items.Add(" ")
		$ProgressListBox.Items.Add("Querying URL: $DellDownloadList")
		$ProgressListBox.Items.Add(" ")
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$DellModelList = (Invoke-WebRequest -Uri $DellDownloadList -Proxy $ProxyServer -ProxyCredential $ProxyCred).links | Where-Object { ($_.innerText -like "Latitude *") -or ($_.innerText -like "Optiplex *") -or ($_.innerText -like "*Precision *") -or ($_.innerText -like "XPS *") -and ($_.innerText -notlike "Precision Work*") -and ($_.innerText -notlike "Precision Mobile*") } | Select-Object innerText
		}
		else
		{
			$DellModelList = (Invoke-WebRequest -Uri $DellDownloadList).links | Where-Object { ($_.innerText -like "Latitude *") -or ($_.innerText -like "Optiplex *") -or ($_.innerText -like "*Precision *") -or ($_.innerText -like "XPS *") -and ($_.innerText -notlike "Precision Work*") -and ($_.innerText -notlike "Precision Mobile*") } | Select-Object innerText
			
		}
		
		foreach ($DellModel in $($DellModelList).innerText)
		{
			
			# Add Model to List
			$DellModelListComboBox.Items.Add($DellModel)
		}
		if (($DellModelList).count -gt "0")
		{
			$ProgressListBox.Items.Add("Returned $(($DellModelList).count) Models ")
			$ProgressListBox.Items.Add(" ")
		}
		$DellModelListComboBox.Text = ($DellModelList.innerText | Select -First 1)
		$DellModelListComboBox.Enabled = $true
		$AddToListlButton.Enabled = $true
		
		#Output to Log
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	
	$UseProxyServerCheckbox_CheckedChanged = {
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyPswdInput.Enabled = $true
			$ProxyUserInput.Enabled = $true
			$ProxyServerInput.Enabled = $true
		}
		else
		{
			$ProxyPswdInput.Enabled = $false
			$ProxyUserInput.Enabled = $false
			$ProxyServerInput.Enabled = $false
		}
	}
	
	$DownloadComboBox_SelectedIndexChanged = {
		
		If ($DownloadComboBox.Text -eq "BIOS")
		{
			$PackagePathTextBox.Enabled = $false
			$OSComboBox.Enabled = $false
			$ArchitectureComboxBox.Enabled = $false
		}
		else
		{
			if ($PlatformComboBox.SelectedItem -eq "Download Only")
			{
				$OSComboBox.Enabled = $true
				$ArchitectureComboxBox.Enabled = $true
			}
			else
			{
				$PackagePathTextBox.Enabled = $true
				$OSComboBox.Enabled = $true
				$ArchitectureComboxBox.Enabled = $true
			}
		}
	}
	
	$PlatformComboBox_SelectedIndexChanged = {
		If ($PlatformComboBox.SelectedItem -eq "MDT")
		{
			$DownloadComboBox.Text = "Drivers"
			$DownloadComboBox.Enabled = $false
			$PackagePathTextBox.Enabled = $false
		}
		If (($PlatformComboBox.SelectedItem -eq "SCCM") -or ($PlatformComboBox.SelectedItem -eq "Both"))
		{
			$DownloadComboBox.Enabled = $true
			$PackagePathTextBox.Enabled = $true
		}
		If ($PlatformComboBox.SelectedItem -eq "Download Only")
		{
			$DownloadComboBox.Enabled = $true
			$PackagePathTextBox.Enabled = $true
			$PackagePathTextBox.Enabled = $false
		}
		$StartDownloadButton.Enabled = $true
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_SiteCodeText = $SiteCodeText.Text
		$script:MainForm_SiteServerInput = $SiteServerInput.Text
		$script:MainForm_DellModelListComboBox = $DellModelListComboBox.Text
		$script:MainForm_DellModelListComboBox_SelectedItem = $DellModelListComboBox.SelectedItem
		$script:MainForm_UseProxyServerCheckbox = $UseProxyServerCheckbox.Checked
		$script:MainForm_ProxyPswdInput = $ProxyPswdInput.Text
		$script:MainForm_ProxyUserInput = $ProxyUserInput.Text
		$script:MainForm_ProxyServerInput = $ProxyServerInput.Text
		$script:MainForm_ProgressListBox = $ProgressListBox.SelectedItems
		$script:MainForm_ProductListBox = $ProductListBox.SelectedItems
		$script:MainForm_ArchitectureComboxBox = $ArchitectureComboxBox.Text
		$script:MainForm_ArchitectureComboxBox_SelectedItem = $ArchitectureComboxBox.SelectedItem
		$script:MainForm_DownloadComboBox = $DownloadComboBox.Text
		$script:MainForm_DownloadComboBox_SelectedItem = $DownloadComboBox.SelectedItem
		$script:MainForm_PlatformComboBox = $PlatformComboBox.Text
		$script:MainForm_PlatformComboBox_SelectedItem = $PlatformComboBox.SelectedItem
		$script:MainForm_PackagePathTextBox = $PackagePathTextBox.Text
		$script:MainForm_RepositoryTextBox = $RepositoryTextBox.Text
		$script:MainForm_OSComboBox = $OSComboBox.Text
		$script:MainForm_OSComboBox_SelectedItem = $OSComboBox.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$ConnectSCCMButton.remove_Click($ConnectSCCMButton_Click)
			$FindDellModelsButton.remove_Click($FindDellModelsButton_Click)
			$AddToListlButton.remove_Click($AddToListlButton_Click)
			$MDTBrowseButton.remove_Click($MDTBrowseButton_Click)
			$UseProxyServerCheckbox.remove_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
			$ClearSelectionButton.remove_Click($ClearSelectionButton_Click)
			$StartDownloadButton.remove_Click($StartDownloadButton_Click)
			$DownloadComboBox.remove_SelectedIndexChanged($DownloadComboBox_SelectedIndexChanged)
			$PlatformComboBox.remove_SelectedIndexChanged($PlatformComboBox_SelectedIndexChanged)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$SCCMDellTabControl.SuspendLayout()
	$SCCMTabPage1.SuspendLayout()
	$SCCMTabPage2.SuspendLayout()
	$SCCMTabPage3.SuspendLayout()
	$SCCMTabPage4.SuspendLayout()
	$DownloadGroupBox.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($DeployEverythingcomLink)
	$MainForm.Controls.Add($SCCMDellTabControl)
	$MainForm.Controls.Add($labelPleaseNoteThisToolIs)
	$MainForm.Controls.Add($ClearSelectionButton)
	$MainForm.Controls.Add($ModelProgressOverlay)
	$MainForm.Controls.Add($ProgressBar)
	$MainForm.Controls.Add($ProgressListBox)
	$MainForm.Controls.Add($AboutToolLabel)
	$MainForm.Controls.Add($AutomationLabel)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.Controls.Add($ProductListBox)
	$MainForm.Controls.Add($StartDownloadButton)
	$MainForm.Controls.Add($DownloadGroupBox)
	$MainForm.Controls.Add($ModelListBox)
	$MainForm.Controls.Add($LoggingLabel)
	$MainForm.Controls.Add($ModelProgressLabel)
	$MainForm.AutoScaleDimensions = '7, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'White'
	$MainForm.ClientSize = '981, 653'
	$MainForm.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$MainForm.FormBorderStyle = 'FixedSingle'
	$MainForm.Margin = '5, 4, 5, 4'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = 'MainForm'
	$MainForm.SizeGripStyle = 'Hide'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'DeployEverything.com - Dell Driver Download Automation Tool v1.9'
	$MainForm.add_Load($MainForm_Load)
	#
	# DeployEverythingcomLink
	#
	$DeployEverythingcomLink.ActiveLinkColor = 'SteelBlue'
	$DeployEverythingcomLink.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$DeployEverythingcomLink.LinkColor = 'DarkGreen'
	$DeployEverythingcomLink.Location = '760, 624'
	$DeployEverythingcomLink.Margin = '4, 0, 4, 0'
	$DeployEverythingcomLink.Name = 'DeployEverythingcomLink'
	$DeployEverythingcomLink.Size = '202, 30'
	$DeployEverythingcomLink.TabIndex = 38
	$DeployEverythingcomLink.TabStop = $True
	$DeployEverythingcomLink.Text = 'DeployEverything.com'
	#
	# SCCMDellTabControl
	#
	$SCCMDellTabControl.Controls.Add($SCCMTabPage1)
	$SCCMDellTabControl.Controls.Add($SCCMTabPage2)
	$SCCMDellTabControl.Controls.Add($SCCMTabPage3)
	$SCCMDellTabControl.Controls.Add($SCCMTabPage4)
	$SCCMDellTabControl.Location = '28, 101'
	$SCCMDellTabControl.Margin = '4, 3, 4, 3'
	$SCCMDellTabControl.Name = 'SCCMDellTabControl'
	$SCCMDellTabControl.SelectedIndex = 0
	$SCCMDellTabControl.Size = '934, 94'
	$SCCMDellTabControl.TabIndex = 0
	#
	# SCCMTabPage1
	#
	$SCCMTabPage1.Controls.Add($SiteCodeText)
	$SCCMTabPage1.Controls.Add($SiteServerInput)
	$SCCMTabPage1.Controls.Add($ConnectSCCMButton)
	$SCCMTabPage1.Controls.Add($SiteCodeLabel)
	$SCCMTabPage1.Controls.Add($SiteServerLabel)
	$SCCMTabPage1.BackColor = 'WhiteSmoke'
	$SCCMTabPage1.ForeColor = 'SteelBlue'
	$SCCMTabPage1.Location = '4, 22'
	$SCCMTabPage1.Margin = '4, 3, 4, 3'
	$SCCMTabPage1.Name = 'SCCMTabPage1'
	$SCCMTabPage1.Padding = '4, 3, 4, 3'
	$SCCMTabPage1.Size = '926, 68'
	$SCCMTabPage1.TabIndex = 0
	$SCCMTabPage1.Text = 'SCCM Site Details'
	#
	# SiteCodeText
	#
	$SiteCodeText.CharacterCasing = 'Upper'
	$SiteCodeText.Enabled = $False
	$SiteCodeText.Font = 'Microsoft Sans Serif, 8.25pt'
	$SiteCodeText.ForeColor = 'Black'
	$SiteCodeText.Location = '357, 24'
	$SiteCodeText.Margin = '4, 3, 4, 3'
	$SiteCodeText.Name = 'SiteCodeText'
	$SiteCodeText.Size = '64, 20'
	$SiteCodeText.TabIndex = 10
	#
	# SiteServerInput
	#
	$SiteServerInput.CharacterCasing = 'Upper'
	$SiteServerInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$SiteServerInput.ForeColor = 'Black'
	$SiteServerInput.Location = '105, 24'
	$SiteServerInput.Margin = '4, 3, 4, 3'
	$SiteServerInput.Name = 'SiteServerInput'
	$SiteServerInput.Size = '150, 20'
	$SiteServerInput.TabIndex = 8
	#
	# ConnectSCCMButton
	#
	$ConnectSCCMButton.BackColor = 'SteelBlue'
	$ConnectSCCMButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ConnectSCCMButton.ForeColor = 'White'
	$ConnectSCCMButton.Location = '453, 24'
	$ConnectSCCMButton.Margin = '4, 3, 4, 3'
	$ConnectSCCMButton.Name = 'ConnectSCCMButton'
	$ConnectSCCMButton.Size = '157, 23'
	$ConnectSCCMButton.TabIndex = 5
	$ConnectSCCMButton.Text = 'Connect To SCCM'
	$ConnectSCCMButton.UseVisualStyleBackColor = $False
	$ConnectSCCMButton.add_Click($ConnectSCCMButton_Click)
	#
	# SiteCodeLabel
	#
	$SiteCodeLabel.AutoSize = $True
	$SiteCodeLabel.BackColor = 'WhiteSmoke'
	$SiteCodeLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteCodeLabel.Location = '271, 27'
	$SiteCodeLabel.Margin = '4, 0, 4, 0'
	$SiteCodeLabel.Name = 'SiteCodeLabel'
	$SiteCodeLabel.Size = '62, 13'
	$SiteCodeLabel.TabIndex = 11
	$SiteCodeLabel.Text = 'Site Code'
	#
	# SiteServerLabel
	#
	$SiteServerLabel.AutoSize = $True
	$SiteServerLabel.BackColor = 'WhiteSmoke'
	$SiteServerLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteServerLabel.Location = '8, 27'
	$SiteServerLabel.Margin = '4, 0, 4, 0'
	$SiteServerLabel.Name = 'SiteServerLabel'
	$SiteServerLabel.Size = '70, 13'
	$SiteServerLabel.TabIndex = 9
	$SiteServerLabel.Text = 'Site Server'
	#
	# SCCMTabPage2
	#
	$SCCMTabPage2.Controls.Add($FindDellModelsButton)
	$SCCMTabPage2.Controls.Add($labelAvailableModels)
	$SCCMTabPage2.Controls.Add($AddToListlButton)
	$SCCMTabPage2.Controls.Add($DellModelListComboBox)
	$SCCMTabPage2.BackColor = 'WhiteSmoke'
	$SCCMTabPage2.ForeColor = 'SteelBlue'
	$SCCMTabPage2.Location = '4, 22'
	$SCCMTabPage2.Margin = '4, 3, 4, 3'
	$SCCMTabPage2.Name = 'SCCMTabPage2'
	$SCCMTabPage2.Padding = '4, 3, 4, 3'
	$SCCMTabPage2.Size = '926, 68'
	$SCCMTabPage2.TabIndex = 1
	$SCCMTabPage2.Text = 'Full Dell Product List'
	#
	# FindDellModelsButton
	#
	$FindDellModelsButton.BackColor = 'SteelBlue'
	$FindDellModelsButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$FindDellModelsButton.ForeColor = 'White'
	$FindDellModelsButton.Location = '358, 23'
	$FindDellModelsButton.Margin = '4, 3, 4, 3'
	$FindDellModelsButton.Name = 'FindDellModelsButton'
	$FindDellModelsButton.Size = '112, 23'
	$FindDellModelsButton.TabIndex = 11
	$FindDellModelsButton.Text = 'Find Models'
	$FindDellModelsButton.UseVisualStyleBackColor = $False
	$FindDellModelsButton.add_Click($FindDellModelsButton_Click)
	#
	# labelAvailableModels
	#
	$labelAvailableModels.AutoSize = $True
	$labelAvailableModels.BackColor = 'WhiteSmoke'
	$labelAvailableModels.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelAvailableModels.Location = '8, 26'
	$labelAvailableModels.Margin = '4, 0, 4, 0'
	$labelAvailableModels.Name = 'labelAvailableModels'
	$labelAvailableModels.Size = '107, 13'
	$labelAvailableModels.TabIndex = 10
	$labelAvailableModels.Text = 'Available Models:'
	#
	# AddToListlButton
	#
	$AddToListlButton.BackColor = 'SteelBlue'
	$AddToListlButton.Enabled = $False
	$AddToListlButton.ForeColor = 'White'
	$AddToListlButton.Location = '478, 23'
	$AddToListlButton.Margin = '4, 3, 4, 3'
	$AddToListlButton.Name = 'AddToListlButton'
	$AddToListlButton.Size = '112, 23'
	$AddToListlButton.TabIndex = 1
	$AddToListlButton.Text = 'Add To List'
	$AddToListlButton.UseVisualStyleBackColor = $False
	$AddToListlButton.add_Click($AddToListlButton_Click)
	#
	# DellModelListComboBox
	#
	$DellModelListComboBox.Enabled = $False
	$DellModelListComboBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$DellModelListComboBox.FormattingEnabled = $True
	$DellModelListComboBox.Location = '145, 23'
	$DellModelListComboBox.Margin = '4, 3, 4, 3'
	$DellModelListComboBox.Name = 'DellModelListComboBox'
	$DellModelListComboBox.Size = '205, 21'
	$DellModelListComboBox.TabIndex = 0
	#
	# SCCMTabPage3
	#
	$SCCMTabPage3.Controls.Add($MDTPathLabel)
	$SCCMTabPage3.Controls.Add($MDTBrowseButton)
	$SCCMTabPage3.BackColor = 'WhiteSmoke'
	$SCCMTabPage3.ForeColor = 'SteelBlue'
	$SCCMTabPage3.Location = '4, 22'
	$SCCMTabPage3.Name = 'SCCMTabPage3'
	$SCCMTabPage3.Size = '926, 68'
	$SCCMTabPage3.TabIndex = 2
	$SCCMTabPage3.Text = 'MDT Manual CSV Import'
	#
	# MDTPathLabel
	#
	$MDTPathLabel.AutoSize = $True
	$MDTPathLabel.Location = '134, 28'
	$MDTPathLabel.Margin = '4, 0, 4, 0'
	$MDTPathLabel.Name = 'MDTPathLabel'
	$MDTPathLabel.RightToLeft = 'No'
	$MDTPathLabel.Size = '131, 13'
	$MDTPathLabel.TabIndex = 3
	$MDTPathLabel.Text = 'No Filename Selected'
	#
	# MDTBrowseButton
	#
	$MDTBrowseButton.BackColor = 'SteelBlue'
	$MDTBrowseButton.ForeColor = 'White'
	$MDTBrowseButton.Location = '28, 23'
	$MDTBrowseButton.Margin = '4, 3, 4, 3'
	$MDTBrowseButton.Name = 'MDTBrowseButton'
	$MDTBrowseButton.Size = '88, 23'
	$MDTBrowseButton.TabIndex = 2
	$MDTBrowseButton.Text = 'Browse'
	$MDTBrowseButton.UseVisualStyleBackColor = $False
	$MDTBrowseButton.add_Click($MDTBrowseButton_Click)
	#
	# SCCMTabPage4
	#
	$SCCMTabPage4.Controls.Add($UseProxyServerCheckbox)
	$SCCMTabPage4.Controls.Add($ProxyPswdInput)
	$SCCMTabPage4.Controls.Add($labelPassword)
	$SCCMTabPage4.Controls.Add($ProxyUserInput)
	$SCCMTabPage4.Controls.Add($labelUsername)
	$SCCMTabPage4.Controls.Add($ProxyServerInput)
	$SCCMTabPage4.Controls.Add($labelProxyServer)
	$SCCMTabPage4.BackColor = 'WhiteSmoke'
	$SCCMTabPage4.Location = '4, 22'
	$SCCMTabPage4.Margin = '4, 4, 4, 4'
	$SCCMTabPage4.Name = 'SCCMTabPage4'
	$SCCMTabPage4.Size = '926, 68'
	$SCCMTabPage4.TabIndex = 3
	$SCCMTabPage4.Text = 'Proxy Server Settings'
	#
	# UseProxyServerCheckbox
	#
	$UseProxyServerCheckbox.Location = '20, 19'
	$UseProxyServerCheckbox.Margin = '4, 4, 4, 4'
	$UseProxyServerCheckbox.Name = 'UseProxyServerCheckbox'
	$UseProxyServerCheckbox.Size = '176, 31'
	$UseProxyServerCheckbox.TabIndex = 20
	$UseProxyServerCheckbox.Text = 'Use A Proxy Server'
	$UseProxyServerCheckbox.UseVisualStyleBackColor = $True
	$UseProxyServerCheckbox.add_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
	#
	# ProxyPswdInput
	#
	$ProxyPswdInput.Enabled = $False
	$ProxyPswdInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyPswdInput.ForeColor = 'Black'
	$ProxyPswdInput.Location = '653, 38'
	$ProxyPswdInput.Margin = '4, 3, 4, 3'
	$ProxyPswdInput.Name = 'ProxyPswdInput'
	$ProxyPswdInput.PasswordChar = '*'
	$ProxyPswdInput.Size = '150, 20'
	$ProxyPswdInput.TabIndex = 18
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.BackColor = 'WhiteSmoke'
	$labelPassword.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelPassword.ForeColor = 'SteelBlue'
	$labelPassword.Location = '568, 41'
	$labelPassword.Margin = '4, 0, 4, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '61, 13'
	$labelPassword.TabIndex = 19
	$labelPassword.Text = 'Password'
	#
	# ProxyUserInput
	#
	$ProxyUserInput.Enabled = $False
	$ProxyUserInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyUserInput.ForeColor = 'Black'
	$ProxyUserInput.Location = '653, 9'
	$ProxyUserInput.Margin = '4, 3, 4, 3'
	$ProxyUserInput.Name = 'ProxyUserInput'
	$ProxyUserInput.Size = '150, 20'
	$ProxyUserInput.TabIndex = 16
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.BackColor = 'WhiteSmoke'
	$labelUsername.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelUsername.ForeColor = 'SteelBlue'
	$labelUsername.Location = '564, 12'
	$labelUsername.Margin = '4, 0, 4, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '63, 13'
	$labelUsername.TabIndex = 17
	$labelUsername.Text = 'Username'
	#
	# ProxyServerInput
	#
	$ProxyServerInput.CharacterCasing = 'Upper'
	$ProxyServerInput.Enabled = $False
	$ProxyServerInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyServerInput.ForeColor = 'Black'
	$ProxyServerInput.Location = '313, 22'
	$ProxyServerInput.Margin = '4, 3, 4, 3'
	$ProxyServerInput.Name = 'ProxyServerInput'
	$ProxyServerInput.Size = '199, 20'
	$ProxyServerInput.TabIndex = 12
	$ProxyServerInput.Text = 'HTTP://SERVER:PORT'
	#
	# labelProxyServer
	#
	$labelProxyServer.AutoSize = $True
	$labelProxyServer.BackColor = 'WhiteSmoke'
	$labelProxyServer.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelProxyServer.ForeColor = 'SteelBlue'
	$labelProxyServer.Location = '204, 25'
	$labelProxyServer.Margin = '4, 0, 4, 0'
	$labelProxyServer.Name = 'labelProxyServer'
	$labelProxyServer.Size = '79, 13'
	$labelProxyServer.TabIndex = 13
	$labelProxyServer.Text = 'Proxy Server'
	#
	# labelPleaseNoteThisToolIs
	#
	$labelPleaseNoteThisToolIs.AutoSize = $True
	$labelPleaseNoteThisToolIs.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelPleaseNoteThisToolIs.Location = '28, 626'
	$labelPleaseNoteThisToolIs.Margin = '4, 0, 4, 0'
	$labelPleaseNoteThisToolIs.Name = 'labelPleaseNoteThisToolIs'
	$labelPleaseNoteThisToolIs.Size = '306, 13'
	$labelPleaseNoteThisToolIs.TabIndex = 36
	$labelPleaseNoteThisToolIs.Text = 'Please Note: This tool is not an official Dell Product '
	#
	# ClearSelectionButton
	#
	$ClearSelectionButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ClearSelectionButton.Location = '28, 389'
	$ClearSelectionButton.Margin = '4, 3, 4, 3'
	$ClearSelectionButton.Name = 'ClearSelectionButton'
	$ClearSelectionButton.Size = '202, 23'
	$ClearSelectionButton.TabIndex = 35
	$ClearSelectionButton.Text = 'Clear Selection'
	$ClearSelectionButton.UseVisualStyleBackColor = $True
	$ClearSelectionButton.add_Click($ClearSelectionButton_Click)
	#
	# ModelProgressOverlay
	#
	$ModelProgressOverlay.Location = '28, 594'
	$ModelProgressOverlay.Margin = '4, 3, 4, 3'
	$ModelProgressOverlay.Name = 'ModelProgressOverlay'
	$ModelProgressOverlay.Size = '934, 23'
	$ModelProgressOverlay.TabIndex = 30
	#
	# ProgressBar
	#
	$ProgressBar.Location = '28, 594'
	$ProgressBar.Margin = '4, 3, 4, 3'
	$ProgressBar.Name = 'ProgressBar'
	$ProgressBar.Size = '934, 23'
	$ProgressBar.Style = 'Continuous'
	$ProgressBar.TabIndex = 28
	#
	# ProgressListBox
	#
	$ProgressListBox.BackColor = 'WhiteSmoke'
	$ProgressListBox.FormattingEnabled = $True
	$ProgressListBox.Location = '28, 448'
	$ProgressListBox.Margin = '4, 3, 4, 3'
	$ProgressListBox.Name = 'ProgressListBox'
	$ProgressListBox.ScrollAlwaysVisible = $True
	$ProgressListBox.Size = '934, 121'
	$ProgressListBox.TabIndex = 27
	#
	# AboutToolLabel
	#
	$AboutToolLabel.AutoSize = $True
	$AboutToolLabel.Font = 'Microsoft Sans Serif, 9pt'
	$AboutToolLabel.Location = '165, 61'
	$AboutToolLabel.Margin = '4, 0, 4, 0'
	$AboutToolLabel.Name = 'AboutToolLabel'
	$AboutToolLabel.Size = '615, 15'
	$AboutToolLabel.TabIndex = 26
	$AboutToolLabel.Text = ' Automates the process of downloading, extracting and importing drivers and BIOS updates into SCCM and MDT'
	#
	# AutomationLabel
	#
	$AutomationLabel.AutoSize = $True
	$AutomationLabel.Font = 'Microsoft Sans Serif, 18pt, style=Bold'
	$AutomationLabel.ForeColor = 'SteelBlue'
	$AutomationLabel.Location = '165, 25'
	$AutomationLabel.Margin = '4, 0, 4, 0'
	$AutomationLabel.Name = 'AutomationLabel'
	$AutomationLabel.Size = '562, 29'
	$AutomationLabel.TabIndex = 25
	$AutomationLabel.Text = 'DeployEverything - Dell Driver Automation Tool'
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAQICAgIDAgIDAwYEAwMDAwcFBQQGCAcJCAgH
CAgJCg0LCQoMCggICw8LDA0ODg8OCQsQERAOEQ0ODg7/2wBDAQIDAwMDAwcEBAcOCQgJDg4ODg4O
Dg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCABQAFADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9efip
8XG8ParJ4d0GVBqSqPtVycHycjIUD+9j8q+LfHPx58HeEr5W8d+PLfT7yUb1iurlpZiPXy1DNj3x
ivJ/ix8VLvRPh3438cMRPfxxy3Maucgyu2Ez7bnXj0r8V9X1bUte8T3msaxey6jqd3KZbm4nbc8j
Huf8OgHFAH7d/wDDWvwL/wCilWv/AIB3f/xqj/hrX4F/9FKtf/AO7/8AjVfhoFLPxVlLfOOKAP3D
/wCGtPgZ/wBFJtf/AACu/wD41Sf8NafAz/opVr/4B3f/AMar8RRa8UG2+XpQB+3X/DWvwL/6KVa/
+Ad3/wDGqP8AhrX4F/8ARSrX/wAA7v8A+NV+HrwYFVipUHIoA/oQ8DfHnwd4tvmbwJ48t9QvIhva
K1uWimA9fLYK2PfGK+0vhX8XG8Q6rH4d16VDqTKfstyMDzsDJUj+9j86/ks0nV9S0HxFZaxo97Lp
2qWkoltrmB9rxsO4/kR0I4NftR8Jfirda78OvBPjlSIL+RIriRUOAJY32vj2LI3HpQB8xfGjWzdf
syeMbffnfBGMZ/6bx1+cqqWcCvpDWfH0Hir9nPW0MwXUBbxrcwk8hhKmSPY4rE/Z9+Bnib4+fHm0
8IaARZWaKJ9W1ORMx2UAOCx9WPRV7n6GgDxqGAswAGTXXt4S8Q22lC+udB1G3ssZ+0S2Uix49dxG
K/bvUPFf7Jv7C+kWeg6P4Zj8XfE5YFeR1ijn1Ikjh5JmGLcHqFXHHY9a9r/ZZ/a+m/aQ8feMNHl8
GR+GLXSLGK4jc3nnNMJHKbWGABjFOxNz+c9bMlRgUNZkJ0r6i+JV/p/hz/go18R9Ym0W31bT7Lxt
qJ/s6RAI2UXEigAYxxwQMY4Fehn9oPwcoyfhuD+MH/xFCSBt9j4LmtSARismaDAORX6BSftG+CIx
8/w1B/78f/E1ny/tM+AUzu+GZ/KD/wCJp2XcV32Pz8ZSrV+i3wS1s2v7MXhG3342RS8Z/wCm8lfP
nxn+MPhX4h+CbHS9E8ER6Fdw3Qla9ZY94XBGwbADg55z6VDoXj6Dwp+zjo0YmB1AwyrbQg8ljK/J
HoM5pFLU+ZopW86QBiN3BwevzCv2m/YynsPhH/wTB8dfFOO2SbWJkvL5iw5kW2jIhjz1wXBz9a/E
q2kze4/z1Ffrr+yL4k0zx1+wv4w+EV/cCK4VLm3dc/MILlCFcD/ZbP4047ilsfnjqWs6t4n8aap4
h16+k1LWtRunub26mbLSyOck/wCA6AYFfp3/AME0rgWnxf8AiYwON2jWw/8AIzV+Z/iDwzrPgv4g
6n4a1+1a01OxmMcqkcMOzqe6kcg+hr7W/Ym+J3g/4c/FLxhJ4u1628PwajpkUdtPdttjZkkLFS3Q
HB4z1pLcHseP/GRBN+2H8VZOu7xfqR/8mpK4rTvD0+sSzRwTW1qsShnluZdiDPQd+fwrX8e6/ZeI
Pj34317TZTPp2o+IL26tZCpXfHJcO6Ng8jKkHn1rlGvpYo2MT7M9RtBB/A1z1vbeyfsrc3S+xyYr
619Wl9Vt7S2nNe1/O2ptXHw41CQYXWdGP/b6f/ia5PXPh3qunaBdag+o6XcxQJueOC83OR7AgZpL
jW7+MZWVP+/Kf4Vzep6/qVzp8ttLMhhcYYLEqkj6gV4sHnXOudQt11ex8hRXGHtY+1dHlur2Ur26
213scHdKM1gSSsJUBJIXIGT0+Y1v3LZNclcSYvMe/wDU19CfeFOxkzqSj/PWvZfh34/1/wCHHxJs
vEvhy58m7hO2WJs+XcRn7yOPQ/pXh2mvu1mMe9dqpKuKAP1GT4l/AL4/eHLODx2sHhzxJHHtWS7n
FvLEe4jnPysuezflT7b9mX4STnzbf4izLC3Kbbm3cY+uea/MaGbB61pRvCcExoT7qKq/cjltsz9Q
Iv2YPhSQP+Lkzg/9dbf/ABqx/wAMsfCh1wfidP8A9/Lf/wCKr8xRJBgfuU/75FDSQFP9TH/3yKLr
sOz7n6Zy/sl/CSQc/FC4H/bS3/8Aiqyp/wBkD4QODn4o3X/fy3/+Kr805mhK58pP++RWTMYyD8i/
98ii67BZ9z6z/aC+BHgD4XfDaw1nwz4+Ou6jPeCE6fM0RdkIJLrsOcDAzn1r4WvJMaiw9/611BAy
SFA+gri9RfGsSD3/AK0mNGt4r8P6j8Pvjr4l8I6zC8GpaDrFxp93G4IIeGVoz+B25B9K20lSWNZI
2DIRkEV+6f8AwUK/4J7a58WfG178a/gnZxXPjWaIf8JB4f3rGdTKLtWaJjgebtABBI3YHOev4D+J
PC/jz4e+I5tG8XeG9Z8I6nExWS01bT5LZwR7OBke44NIZ1QchsirCXBGK8t/tm//AOfhqP7Zv/8A
n4agD1v7XxSG6O2vJv7a1D/n4aj+2tQ/5+GoA9RefIquzlhzXmv9s3//AD8NR/bN/wD8/DUAeiSS
pFA0kjBVXkk1ieE/D+o/EH46eGvCOjQvPqevaxb6faRoMkvNKsY/Absk+lVvDfhfx58QvEUGjeEf
DWs+LtSlYLHaaTp8ly5J9kBwPc8Cv34/4J6/8E9tc+E3jay+Nfxss4rbxrDEf+Ef8P71kOmF12tN
KwyPN2kgAE7cnnPQA//Z')
	#endregion
	$picturebox1.Location = '77, 12'
	$picturebox1.Margin = '4, 3, 4, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '70, 70'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 24
	$picturebox1.TabStop = $False
	#
	# ProductListBox
	#
	$ProductListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ProductListBox.ForeColor = 'SteelBlue'
	$ProductListBox.FormattingEnabled = $True
	$ProductListBox.Location = '28, 234'
	$ProductListBox.Margin = '4, 3, 4, 3'
	$ProductListBox.Name = 'ProductListBox'
	$ProductListBox.SelectionMode = 'MultiExtended'
	$ProductListBox.Size = '202, 134'
	$ProductListBox.Sorted = $True
	$ProductListBox.TabIndex = 3
	#
	# StartDownloadButton
	#
	$StartDownloadButton.Anchor = 'None'
	$StartDownloadButton.BackColor = 'SteelBlue'
	$StartDownloadButton.Enabled = $False
	$StartDownloadButton.FlatAppearance.BorderSize = 0
	$StartDownloadButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$StartDownloadButton.ForeColor = 'White'
	$StartDownloadButton.Location = '603, 389'
	$StartDownloadButton.Margin = '4, 3, 4, 3'
	$StartDownloadButton.Name = 'StartDownloadButton'
	$StartDownloadButton.Size = '359, 23'
	$StartDownloadButton.TabIndex = 0
	$StartDownloadButton.Text = 'Start Download and Import Process'
	$StartDownloadButton.UseVisualStyleBackColor = $False
	$StartDownloadButton.add_Click($StartDownloadButton_Click)
	#
	# DownloadGroupBox
	#
	$DownloadGroupBox.Controls.Add($ArchitectureComboxBox)
	$DownloadGroupBox.Controls.Add($DownloadComboBox)
	$DownloadGroupBox.Controls.Add($PlatformComboBox)
	$DownloadGroupBox.Controls.Add($PackagePathTextBox)
	$DownloadGroupBox.Controls.Add($RepositoryTextBox)
	$DownloadGroupBox.Controls.Add($OSComboBox)
	$DownloadGroupBox.Controls.Add($PackagePathLabel)
	$DownloadGroupBox.Controls.Add($RepositoryLabel)
	$DownloadGroupBox.Controls.Add($ArchitectureCheckBox)
	$DownloadGroupBox.Controls.Add($lSelectDeployLabel)
	$DownloadGroupBox.Controls.Add($OperatingSysLabel)
	$DownloadGroupBox.Controls.Add($labelDownloadType)
	$DownloadGroupBox.BackColor = 'WhiteSmoke'
	$DownloadGroupBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$DownloadGroupBox.ForeColor = 'SteelBlue'
	$DownloadGroupBox.Location = '255, 218'
	$DownloadGroupBox.Margin = '4, 3, 4, 3'
	$DownloadGroupBox.Name = 'DownloadGroupBox'
	$DownloadGroupBox.Padding = '4, 3, 4, 3'
	$DownloadGroupBox.Size = '707, 165'
	$DownloadGroupBox.TabIndex = 21
	$DownloadGroupBox.TabStop = $False
	$DownloadGroupBox.Text = 'Download Selection'
	#
	# ArchitectureComboxBox
	#
	$ArchitectureComboxBox.BackColor = 'White'
	$ArchitectureComboxBox.DropDownStyle = 'DropDownList'
	$ArchitectureComboxBox.FormattingEnabled = $True
	[void]$ArchitectureComboxBox.Items.Add('64 bit')
	[void]$ArchitectureComboxBox.Items.Add('32 bit')
	$ArchitectureComboxBox.Location = '230, 113'
	$ArchitectureComboxBox.Margin = '4, 3, 4, 3'
	$ArchitectureComboxBox.Name = 'ArchitectureComboxBox'
	$ArchitectureComboxBox.Size = '140, 21'
	$ArchitectureComboxBox.TabIndex = 28
	#
	# DownloadComboBox
	#
	$DownloadComboBox.BackColor = 'White'
	$DownloadComboBox.DropDownStyle = 'DropDownList'
	$DownloadComboBox.FormattingEnabled = $True
	[void]$DownloadComboBox.Items.Add('Drivers')
	[void]$DownloadComboBox.Items.Add('BIOS')
	[void]$DownloadComboBox.Items.Add('All')
	$DownloadComboBox.Location = '13, 113'
	$DownloadComboBox.Margin = '4, 3, 4, 3'
	$DownloadComboBox.Name = 'DownloadComboBox'
	$DownloadComboBox.Size = '140, 21'
	$DownloadComboBox.TabIndex = 27
	$DownloadComboBox.add_SelectedIndexChanged($DownloadComboBox_SelectedIndexChanged)
	#
	# PlatformComboBox
	#
	$PlatformComboBox.BackColor = 'White'
	$PlatformComboBox.DropDownStyle = 'DropDownList'
	$PlatformComboBox.FormattingEnabled = $True
	[void]$PlatformComboBox.Items.Add('SCCM')
	[void]$PlatformComboBox.Items.Add('MDT')
	[void]$PlatformComboBox.Items.Add('Both')
	[void]$PlatformComboBox.Items.Add('Download Only')
	$PlatformComboBox.Location = '13, 47'
	$PlatformComboBox.Margin = '4, 3, 4, 3'
	$PlatformComboBox.Name = 'PlatformComboBox'
	$PlatformComboBox.Size = '140, 21'
	$PlatformComboBox.TabIndex = 26
	$PlatformComboBox.add_SelectedIndexChanged($PlatformComboBox_SelectedIndexChanged)
	#
	# PackagePathTextBox
	#
	$PackagePathTextBox.CharacterCasing = 'Upper'
	$PackagePathTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$PackagePathTextBox.Location = '430, 113'
	$PackagePathTextBox.Margin = '4, 3, 4, 3'
	$PackagePathTextBox.Name = 'PackagePathTextBox'
	$PackagePathTextBox.Size = '247, 20'
	$PackagePathTextBox.TabIndex = 22
	$PackagePathTextBox.Text = '\\SERVER\SHARE'
	#
	# RepositoryTextBox
	#
	$RepositoryTextBox.CharacterCasing = 'Upper'
	$RepositoryTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$RepositoryTextBox.Location = '430, 46'
	$RepositoryTextBox.Margin = '4, 3, 4, 3'
	$RepositoryTextBox.Name = 'RepositoryTextBox'
	$RepositoryTextBox.Size = '247, 20'
	$RepositoryTextBox.TabIndex = 21
	$RepositoryTextBox.Text = '\\SERVER\SHARE'
	#
	# OSComboBox
	#
	$OSComboBox.DropDownStyle = 'DropDownList'
	$OSComboBox.FormattingEnabled = $True
	[void]$OSComboBox.Items.Add('Windows 10')
	[void]$OSComboBox.Items.Add('Windows 8.1')
	[void]$OSComboBox.Items.Add('Windows 8')
	[void]$OSComboBox.Items.Add('Windows 7')
	$OSComboBox.Location = '230, 47'
	$OSComboBox.Margin = '4, 3, 4, 3'
	$OSComboBox.Name = 'OSComboBox'
	$OSComboBox.Size = '140, 21'
	$OSComboBox.TabIndex = 16
	#
	# PackagePathLabel
	#
	$PackagePathLabel.AutoSize = $True
	$PackagePathLabel.ForeColor = 'Black'
	$PackagePathLabel.Location = '430, 94'
	$PackagePathLabel.Margin = '4, 0, 4, 0'
	$PackagePathLabel.Name = 'PackagePathLabel'
	$PackagePathLabel.Size = '87, 13'
	$PackagePathLabel.TabIndex = 24
	$PackagePathLabel.Text = 'Package Path'
	#
	# RepositoryLabel
	#
	$RepositoryLabel.AutoSize = $True
	$RepositoryLabel.ForeColor = 'Black'
	$RepositoryLabel.Location = '430, 28'
	$RepositoryLabel.Margin = '4, 0, 4, 0'
	$RepositoryLabel.Name = 'RepositoryLabel'
	$RepositoryLabel.Size = '97, 13'
	$RepositoryLabel.TabIndex = 23
	$RepositoryLabel.Text = 'Repository Path'
	#
	# ArchitectureCheckBox
	#
	$ArchitectureCheckBox.AutoSize = $True
	$ArchitectureCheckBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ArchitectureCheckBox.ForeColor = 'Black'
	$ArchitectureCheckBox.Location = '230, 94'
	$ArchitectureCheckBox.Margin = '4, 0, 4, 0'
	$ArchitectureCheckBox.Name = 'ArchitectureCheckBox'
	$ArchitectureCheckBox.Size = '76, 13'
	$ArchitectureCheckBox.TabIndex = 20
	$ArchitectureCheckBox.Text = 'Architecture'
	#
	# lSelectDeployLabel
	#
	$lSelectDeployLabel.AutoSize = $True
	$lSelectDeployLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$lSelectDeployLabel.ForeColor = 'Black'
	$lSelectDeployLabel.Location = '10, 28'
	$lSelectDeployLabel.Margin = '4, 0, 4, 0'
	$lSelectDeployLabel.Name = 'lSelectDeployLabel'
	$lSelectDeployLabel.Size = '123, 13'
	$lSelectDeployLabel.TabIndex = 14
	$lSelectDeployLabel.Text = 'Deployment Platform'
	#
	# OperatingSysLabel
	#
	$OperatingSysLabel.AutoSize = $True
	$OperatingSysLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$OperatingSysLabel.ForeColor = 'Black'
	$OperatingSysLabel.Location = '230, 28'
	$OperatingSysLabel.Margin = '4, 0, 4, 0'
	$OperatingSysLabel.Name = 'OperatingSysLabel'
	$OperatingSysLabel.Size = '106, 13'
	$OperatingSysLabel.TabIndex = 17
	$OperatingSysLabel.Text = 'Operating System'
	#
	# labelDownloadType
	#
	$labelDownloadType.AutoSize = $True
	$labelDownloadType.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelDownloadType.ForeColor = 'Black'
	$labelDownloadType.Location = '10, 94'
	$labelDownloadType.Margin = '4, 0, 4, 0'
	$labelDownloadType.Name = 'labelDownloadType'
	$labelDownloadType.Size = '95, 13'
	$labelDownloadType.TabIndex = 13
	$labelDownloadType.Text = 'Download Type'
	#
	# ModelListBox
	#
	$ModelListBox.AutoSize = $True
	$ModelListBox.BackColor = 'Transparent'
	$ModelListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelListBox.Location = '28, 218'
	$ModelListBox.Margin = '4, 0, 4, 0'
	$ModelListBox.Name = 'ModelListBox'
	$ModelListBox.Size = '65, 13'
	$ModelListBox.TabIndex = 4
	$ModelListBox.Text = 'Model List'
	#
	# LoggingLabel
	#
	$LoggingLabel.AutoSize = $True
	$LoggingLabel.BackColor = 'Transparent'
	$LoggingLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$LoggingLabel.Location = '28, 428'
	$LoggingLabel.Margin = '4, 0, 4, 0'
	$LoggingLabel.Name = 'LoggingLabel'
	$LoggingLabel.Size = '101, 13'
	$LoggingLabel.TabIndex = 34
	$LoggingLabel.Text = 'Job Process Log'
	#
	# ModelProgressLabel
	#
	$ModelProgressLabel.AutoSize = $True
	$ModelProgressLabel.BackColor = 'Transparent'
	$ModelProgressLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelProgressLabel.Location = '28, 574'
	$ModelProgressLabel.Margin = '4, 0, 4, 0'
	$ModelProgressLabel.Name = 'ModelProgressLabel'
	$ModelProgressLabel.Size = '94, 13'
	$ModelProgressLabel.TabIndex = 32
	$ModelProgressLabel.Text = 'Model Progress'
	#
	# OpenMDTFileDialog
	#
	$DownloadGroupBox.ResumeLayout()
	$SCCMTabPage4.ResumeLayout()
	$SCCMTabPage3.ResumeLayout()
	$SCCMTabPage2.ResumeLayout()
	$SCCMTabPage1.ResumeLayout()
	$SCCMDellTabControl.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	$ErrorActionPreference = 'SilentlyContinue'
	$WarningPreference = 'SilentlyContinue'
	
	# Define Dell Download Sources
	$DellDownloadList = "http://downloads.dell.com/published/Pages/index.html"
	$DellDownloadBase = "http://downloads.dell.com"
	$DellDriverListURL = "http://en.community.dell.com/techcenter/enterprise-client/w/wiki/2065.dell-command-deploy-driver-packs-for-enterprise-client-os-deployment"
	$DellBaseURL = "http://en.community.dell.com"
	
	# ArrayList to store the Dell models in
	$DellProducts = New-Object -TypeName System.Collections.ArrayList
	
	# Log File Location
	$LogFile = "$env:TEMP\DeployEverythingDellLog.txt"
	
	# MDT PS Commandlets
	$MDTPSCommandlets = "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
	
	# Proxy Validation Initial State
	$ProxyValidated = $false
	
	# Query SCCM Site Code
	function QuerySiteCode ($SiteServer)
	{
		$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $SiteServer -ErrorAction Stop
		if ($SiteCodeObjects -gt $null)
		{
			foreach ($SiteCodeObject in $SiteCodeObjects)
			{
				if ($SiteCodeObject.ProviderForLocalSite -eq $true)
				{
					$SiteCode = $SiteCodeObject.SiteCode
					$ProgressListBox.Items.Add("Site Code Found: $($SiteCode)")
					$SiteCodeText.text = $SiteCode
				}
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Error Site Code Not Found: Please check your security rights to the $SiteServer server.")
			
		}
		UpdateLogWindow
	}
	
	function UpdateLogWindow
	{
		$ProgressListBox.SelectedIndex = $ProgressListBox.Items.Count - 1;
		$ProgressListBox.SelectedIndex = -1;
	}
	
	
	
	
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
